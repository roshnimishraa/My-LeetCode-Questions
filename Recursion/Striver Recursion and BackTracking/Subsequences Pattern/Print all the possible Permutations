Problem Link : https://leetcode.com/problems/permutations/

Total number of Permutations : n!

Naive Approach : Using array freq array or map 
TC : O(N! * N) 
SC : O(N) 

class Solution {
public:
void helper(vector<int> &output,vector<int>& nums,int freq[],vector<vector<int>> &ans)
{
 if(output.size() == nums.size())
 {
     ans.push_back(output);
     return;
 }
 
 for(int i=0;i<nums.size();i++){
     if(!freq[i])
     {
   output.push_back(nums[i]);
        freq[i] = 1;
        helper(output,nums,freq,ans);
        // backtracking 
        freq[i] = 0;
        output.pop_back();
     }
 }
}

vector<vector<int>> permute(vector<int>& nums) {
           vector<vector<int>> ans;
           vector<int> output;
           int n = nums.size();
           int freq[n];
        for(int i=0;i<n;i++){
            freq[i] = 0;
        }
           helper(output,nums,freq,ans);
    return ans;

    }
};
--------------------------------------------------------------------------------------------------------------------------------------------------------------


Efficient Approach : Optimised Space Complexity
TC : O(N! * N) 
SC : O(1) 

class Solution {
public:
void helper(int index,vector<int> &nums,vector<vector<int>> &ans)
{
    if(index == nums.size()) {
        ans.push_back(nums);
        return;
    }

for(int i= index;i<nums.size();i++){
    swap(nums[index],nums[i]);
helper(index+1,nums,ans);
    swap(nums[index],nums[i]);
}

}

    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> ans;
      helper(0,nums,ans);
    return ans;
    }
};
